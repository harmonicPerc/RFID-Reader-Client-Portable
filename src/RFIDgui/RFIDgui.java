/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package RFIDgui;
import java.io.IOException;

public class RFIDgui extends javax.swing.JFrame {

    /**
     * Creates new form rfid_gui
     */
    public RFIDgui() {
        initComponents();
        detectedTagTable.setColumnSelectionAllowed(false);
        readFromFile(databaseFile);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        editTagWindow = new javax.swing.JFrame();
        editTagPanel = new javax.swing.JPanel();
        idTextField = new javax.swing.JTextField();
        idLabel = new javax.swing.JLabel();
        nameLabel = new javax.swing.JLabel();
        nameTextField = new javax.swing.JTextField();
        descriptionLabel = new javax.swing.JLabel();
        descriptionTextField = new javax.swing.JTextField();
        thumbnailDisplay = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        saveTagData = new javax.swing.JButton();
        viewFullSizeImage = new javax.swing.JButton();
        setTagImage = new javax.swing.JButton();
        selectDatabase = new javax.swing.JFileChooser();
        OLDcode = new javax.swing.JFrame();
        OLDdetectedTagScrollPanel = new javax.swing.JScrollPane();
        OLDdetectedTagList = new javax.swing.JList<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        tagImageChooser = new javax.swing.JFileChooser();
        fullImageWindow = new javax.swing.JFrame();
        fullImageLabel = new javax.swing.JLabel();
        writeTagWindow = new javax.swing.JFrame();
        writeTagWriteButton = new javax.swing.JButton();
        writeTagExitButton = new javax.swing.JButton();
        writeTagPanel = new javax.swing.JPanel();
        writeTagScrollPanel = new javax.swing.JScrollPane();
        writeTagTable = new javax.swing.JTable();
        writeWarningPopup = new javax.swing.JDialog();
        writeWarningLabel = new javax.swing.JLabel();
        writeWarningOkButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        detectedTagScrollPanel = new javax.swing.JScrollPane();
        detectedTagTable = new javax.swing.JTable();
        mainExitButton = new javax.swing.JButton();
        scanButton = new javax.swing.JButton();
        scanContinuously = new javax.swing.JCheckBox();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        fileMenuOpenDatabase = new javax.swing.JMenuItem();
        fileMenuQuit = new javax.swing.JMenuItem();
        optionsMenu = new javax.swing.JMenu();
        optionsMenuConfig = new javax.swing.JMenuItem();
        optionsMenuWriteTag = new javax.swing.JMenuItem();

        editTagWindow.setTitle("Edit Tag");
        editTagWindow.setMinimumSize(new java.awt.Dimension(400, 200));
        editTagWindow.setSize(new java.awt.Dimension(800, 445));

        editTagPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("RFID Tag Data"));
        editTagPanel.setPreferredSize(new java.awt.Dimension(500, 125));

        idTextField.setEditable(false);
        idTextField.setText("123456789");

        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        idLabel.setText("id:");

        nameLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        nameLabel.setText("Name:");

        nameTextField.setText("Sample Tag");
        nameTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                nameTextFieldActionPerformed(evt);
            }
        });

        descriptionLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        descriptionLabel.setText("Description:");

        descriptionTextField.setText("Sample description.");

        javax.swing.GroupLayout editTagPanelLayout = new javax.swing.GroupLayout(editTagPanel);
        editTagPanel.setLayout(editTagPanelLayout);
        editTagPanelLayout.setHorizontalGroup(
            editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTagPanelLayout.createSequentialGroup()
                .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editTagPanelLayout.createSequentialGroup()
                        .addGap(126, 126, 126)
                        .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(nameLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(descriptionLabel, javax.swing.GroupLayout.Alignment.TRAILING)))
                    .addGroup(editTagPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(editTagPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(thumbnailDisplay, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(idTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(nameTextField, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(descriptionTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 472, Short.MAX_VALUE))
                .addContainerGap())
        );
        editTagPanelLayout.setVerticalGroup(
            editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTagPanelLayout.createSequentialGroup()
                .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(idLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(editTagPanelLayout.createSequentialGroup()
                        .addComponent(descriptionLabel)
                        .addGap(10, 10, 10)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(thumbnailDisplay))
                    .addComponent(descriptionTextField))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        saveTagData.setText("Save and Exit");
        saveTagData.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                saveTagDataMouseClicked(evt);
            }
        });

        viewFullSizeImage.setText("View Full Size Image");
        viewFullSizeImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                viewFullSizeImageMouseClicked(evt);
            }
        });

        setTagImage.setText("Set Tag Image");
        setTagImage.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                setTagImageMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout editTagWindowLayout = new javax.swing.GroupLayout(editTagWindow.getContentPane());
        editTagWindow.getContentPane().setLayout(editTagWindowLayout);
        editTagWindowLayout.setHorizontalGroup(
            editTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTagWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(editTagWindowLayout.createSequentialGroup()
                        .addComponent(editTagPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 718, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(editTagWindowLayout.createSequentialGroup()
                        .addComponent(viewFullSizeImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(setTagImage)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(saveTagData)))
                .addContainerGap())
        );
        editTagWindowLayout.setVerticalGroup(
            editTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editTagWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(editTagPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(editTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(saveTagData)
                    .addComponent(viewFullSizeImage)
                    .addComponent(setTagImage))
                .addContainerGap())
        );

        OLDdetectedTagList.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "12", "34", "56", "78", "90" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        OLDdetectedTagList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                OLDdetectedTagListMouseClicked(evt);
            }
        });
        OLDdetectedTagScrollPanel.setViewportView(OLDdetectedTagList);

        javax.swing.GroupLayout OLDcodeLayout = new javax.swing.GroupLayout(OLDcode.getContentPane());
        OLDcode.getContentPane().setLayout(OLDcodeLayout);
        OLDcodeLayout.setHorizontalGroup(
            OLDcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OLDcodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OLDdetectedTagScrollPanel)
                .addContainerGap())
        );
        OLDcodeLayout.setVerticalGroup(
            OLDcodeLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(OLDcodeLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(OLDdetectedTagScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 254, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        fullImageWindow.setTitle("RFID Tag Image");
        fullImageWindow.setSize(new java.awt.Dimension(536, 536));

        fullImageLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                fullImageLabelMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout fullImageWindowLayout = new javax.swing.GroupLayout(fullImageWindow.getContentPane());
        fullImageWindow.getContentPane().setLayout(fullImageWindowLayout);
        fullImageWindowLayout.setHorizontalGroup(
            fullImageWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullImageWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fullImageLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        fullImageWindowLayout.setVerticalGroup(
            fullImageWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fullImageWindowLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fullImageLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        writeTagWriteButton.setText("Write");
        writeTagWriteButton.setMargin(new java.awt.Insets(5, 10, 5, 10));
        writeTagWriteButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeTagWriteButtonMouseClicked(evt);
            }
        });

        writeTagExitButton.setText("Exit");
        writeTagExitButton.setMargin(new java.awt.Insets(5, 10, 5, 10));
        writeTagExitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeTagExitButtonMouseClicked(evt);
            }
        });

        writeTagScrollPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Detected Tags:"));

        writeTagTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tag Number", "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        writeTagTable.getTableHeader().setReorderingAllowed(false);
        writeTagTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeTagTableMouseClicked(evt);
            }
        });
        writeTagScrollPanel.setViewportView(writeTagTable);
        writeTagTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (writeTagTable.getColumnModel().getColumnCount() > 0) {
            writeTagTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            writeTagTable.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        javax.swing.GroupLayout writeTagPanelLayout = new javax.swing.GroupLayout(writeTagPanel);
        writeTagPanel.setLayout(writeTagPanelLayout);
        writeTagPanelLayout.setHorizontalGroup(
            writeTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(writeTagScrollPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 763, Short.MAX_VALUE)
        );
        writeTagPanelLayout.setVerticalGroup(
            writeTagPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(writeTagScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 387, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout writeTagWindowLayout = new javax.swing.GroupLayout(writeTagWindow.getContentPane());
        writeTagWindow.getContentPane().setLayout(writeTagWindowLayout);
        writeTagWindowLayout.setHorizontalGroup(
            writeTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writeTagWindowLayout.createSequentialGroup()
                .addContainerGap(642, Short.MAX_VALUE)
                .addComponent(writeTagWriteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(writeTagExitButton)
                .addContainerGap())
            .addGroup(writeTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(writeTagWindowLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(writeTagPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        writeTagWindowLayout.setVerticalGroup(
            writeTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, writeTagWindowLayout.createSequentialGroup()
                .addContainerGap(406, Short.MAX_VALUE)
                .addGroup(writeTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(writeTagExitButton)
                    .addComponent(writeTagWriteButton))
                .addContainerGap())
            .addGroup(writeTagWindowLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, writeTagWindowLayout.createSequentialGroup()
                    .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(writeTagPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(58, 58, 58)))
        );

        writeWarningLabel.setText("Warning! All tags listed in the following window may be overwritten.");

        writeWarningOkButton.setText("Ok");
        writeWarningOkButton.setHideActionText(true);
        writeWarningOkButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                writeWarningOkButtonMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout writeWarningPopupLayout = new javax.swing.GroupLayout(writeWarningPopup.getContentPane());
        writeWarningPopup.getContentPane().setLayout(writeWarningPopupLayout);
        writeWarningPopupLayout.setHorizontalGroup(
            writeWarningPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writeWarningPopupLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(writeWarningPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(writeWarningLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(writeWarningOkButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        writeWarningPopupLayout.setVerticalGroup(
            writeWarningPopupLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(writeWarningPopupLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(writeWarningLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(writeWarningOkButton)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("RFID Utility");
        setMaximumSize(new java.awt.Dimension(800, 480));
        setPreferredSize(new java.awt.Dimension(800, 415));
        setResizable(false);

        detectedTagScrollPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Detected Tags:"));

        detectedTagTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Tag Number", "Name", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        detectedTagTable.setColumnSelectionAllowed(true);
        detectedTagTable.setMinimumSize(new java.awt.Dimension(45, 200));
        detectedTagTable.getTableHeader().setReorderingAllowed(false);
        detectedTagTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                detectedTagTableMouseClicked(evt);
            }
        });
        detectedTagScrollPanel.setViewportView(detectedTagTable);
        detectedTagTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (detectedTagTable.getColumnModel().getColumnCount() > 0) {
            detectedTagTable.getColumnModel().getColumn(0).setPreferredWidth(10);
            detectedTagTable.getColumnModel().getColumn(1).setPreferredWidth(10);
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detectedTagScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 890, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(detectedTagScrollPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 335, Short.MAX_VALUE)
        );

        mainExitButton.setText("Exit");
        mainExitButton.setMargin(new java.awt.Insets(5, 10, 5, 10));
        mainExitButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainExitButtonMouseClicked(evt);
            }
        });

        scanButton.setText("Scan");
        scanButton.setMargin(new java.awt.Insets(5, 10, 5, 10));
        scanButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                scanButtonMouseClicked(evt);
            }
        });
        scanButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanButtonActionPerformed(evt);
            }
        });

        scanContinuously.setText("Scan Continuously");
        scanContinuously.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                scanContinuouslyActionPerformed(evt);
            }
        });

        fileMenu.setText("File");

        fileMenuOpenDatabase.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuOpenDatabase.setText("Open Database File");
        fileMenuOpenDatabase.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuOpenDatabaseActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuOpenDatabase);

        fileMenuQuit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Q, java.awt.event.InputEvent.CTRL_MASK));
        fileMenuQuit.setText("Quit");
        fileMenuQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileMenuQuitActionPerformed(evt);
            }
        });
        fileMenu.add(fileMenuQuit);

        mainMenuBar.add(fileMenu);

        optionsMenu.setText("Options");

        optionsMenuConfig.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        optionsMenuConfig.setText("Configure Antennas");
        optionsMenu.add(optionsMenuConfig);

        optionsMenuWriteTag.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        optionsMenuWriteTag.setText("Write Tag ID");
        optionsMenuWriteTag.setAutoscrolls(true);
        optionsMenuWriteTag.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                optionsMenuWriteTagActionPerformed(evt);
            }
        });
        optionsMenu.add(optionsMenuWriteTag);

        mainMenuBar.add(optionsMenu);

        setJMenuBar(mainMenuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(scanContinuously)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(scanButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(mainExitButton)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(mainExitButton)
                    .addComponent(scanButton)
                    .addComponent(scanContinuously))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void writeToFile() {
        org.json.simple.JSONObject tagList = new org.json.simple.JSONObject();
        
        org.json.simple.JSONArray array = new org.json.simple.JSONArray();
        
        for (int i = 0; i < rfidTagDatabase.size(); i++) {
            org.json.simple.JSONObject obj = new org.json.simple.JSONObject();
            obj.put("ID Number", rfidTagDatabase.get(i).tagNumber);
            obj.put("Name", rfidTagDatabase.get(i).objectName);
            obj.put("Description", rfidTagDatabase.get(i).objectDescription);
            array.add(obj);
        }

        tagList.put("RFID Data List", array);
        
        try (java.io.FileWriter file = new java.io.FileWriter("./default.json")) {
            file.write(tagList.toJSONString());
            file.flush();
            file.close();
        } catch (java.io.IOException e) {
            e.printStackTrace();
        }
    }

    private void readFromFile(String filenameIn) {
        org.json.simple.parser.JSONParser parser = new org.json.simple.parser.JSONParser();
        try {
            org.json.simple.JSONObject obj = (org.json.simple.JSONObject) parser.parse(new java.io.FileReader(filenameIn));
            org.json.simple.JSONArray array = (org.json.simple.JSONArray) obj.get("RFID Data List");
            
            java.util.Iterator i = array.iterator();
            
            while (i.hasNext()) {
                org.json.simple.JSONObject innerObj = (org.json.simple.JSONObject) i.next();
                rfidTagDatabase.add(new RFIDdata(innerObj.get("ID Number").toString(), innerObj.get("Name").toString(), innerObj.get("Description").toString()));
            }
            
            System.out.println(array.toString());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void scanContinuouslyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanContinuouslyActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_scanContinuouslyActionPerformed

    private void OLDdetectedTagListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_OLDdetectedTagListMouseClicked
//        javax.swing.JList<String> list = (javax.swing.JList<String>) evt.getSource();
//        java.awt.Rectangle r = list.getCellBounds(0, list.getLastVisibleIndex());
//        if (r != null && r.contains(evt.getPoint()) && evt.getClickCount() == 2) {
//            int index = list.locationToIndex(evt.getPoint());
//            javax.swing.ListModel<String> model = list.getModel();
//            System.out.println(model.getElementAt(index));
//
//            RFIDdata current = new RFIDdata(java.lang.Integer.parseInt(model.getElementAt(index)));
//            if (rfidTagList.contains(current)) {
//                current = rfidTagList.get(rfidTagList.indexOf(current));
//            } else {
//                rfidTagList.add(current);
//            }
//            this.editTagWindow.setVisible(true);
//            this.idTextField.setText(java.lang.Integer.toString(current.tagNumber));
//            this.nameTextField.setText(current.objectName);
//            this.descriptionTextField.setText(current.objectDescription);
//            System.out.println("index: " + index);
//        }
        // TODO add your handling code here:
    }//GEN-LAST:event_OLDdetectedTagListMouseClicked

    private void nameTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_nameTextFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_nameTextFieldActionPerformed

    private void saveTagDataMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_saveTagDataMouseClicked
//        RFIDdata current = new RFIDdata(idTextField.getText(), nameTextField.getText(), descriptionTextField.getText());
        RFIDdata current = new RFIDdata(idTextField.getText());
        rfidTagList.remove(current);
        rfidTagDatabase.remove(current);
        
        RFIDdata toWrite = new RFIDdata(idTextField.getText(), nameTextField.getText(), descriptionTextField.getText());
        rfidTagList.add(toWrite);
        rfidTagDatabase.add(toWrite);
        
        writeToFile();
        updateTagTable();
        this.editTagWindow.setVisible(false);
        
        System.out.println("\n\nSaving:\n");
        for (int i = 0; i < rfidTagList.size(); i++) {
            System.out.println(rfidTagList.get(i).tagNumber);
            System.out.println(rfidTagList.get(i).objectName);
            System.out.println(rfidTagList.get(i).objectDescription);
        }
    }//GEN-LAST:event_saveTagDataMouseClicked

    private void fileMenuOpenDatabaseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuOpenDatabaseActionPerformed
        readFromFile(databaseFile);
    }//GEN-LAST:event_fileMenuOpenDatabaseActionPerformed

    private void fileMenuQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileMenuQuitActionPerformed
        exitReader();
    }//GEN-LAST:event_fileMenuQuitActionPerformed

    private void scanButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_scanButtonMouseClicked
        this.setCursor(java.awt.Cursor.getPredefinedCursor(java.awt.Cursor.WAIT_CURSOR));
        
        rfidTagList = new java.util.ArrayList<RFIDdata>();
        
        
//        tagReads = reader.doRead();
//        for (TagReadData tr: tagReads) {
//            RFIDdata current = new RFIDdata(tr.getTag().epcString());
//            if (rfidTagDatabase.contains(current)) {
//                current = rfidTagDatabase.get(rfidTagDatabase.indexOf(current));
//                System.out.println("match");
//            } else {
//                rfidTagDatabase.add(current);
//            }
//            if (!rfidTagList.contains(current)) {
//                rfidTagList.add(current);
//            }
//        }
        
        ////// Troubleshooting
         rfidTagList.add(new RFIDdata());
        //////
        
        updateTagTable();
        writeToFile();
        
        this.setCursor(java.awt.Cursor.getDefaultCursor());
    }//GEN-LAST:event_scanButtonMouseClicked

    private void updateTagTable() {
        for (int i = 0; i < detectedTagTable.getRowCount(); i++) {
            for(int j = 0; j < detectedTagTable.getColumnCount(); j++) {
                detectedTagTable.setValueAt("", i, j);
            }
         }
        
        //readFromFile(databaseFile);
        
//        ////////// Print Diagnostic Info
//        System.out.println("\n\nUpdate:\n");
//        for (int i = 0; i < this.rfidTagList.size(); i++) {
//            System.out.println(this.rfidTagList.get(i).tagNumber);
//            System.out.println(this.rfidTagList.get(i).objectName);
//            System.out.println(this.rfidTagList.get(i).objectDescription);
//        }
        
        for (int i = 0; i < rfidTagList.size(); i++) {
            detectedTagTable.setValueAt(rfidTagList.get(i).tagNumber, i, 0);
            detectedTagTable.setValueAt(rfidTagList.get(i).objectName, i, 1);
            detectedTagTable.setValueAt(rfidTagList.get(i).objectDescription, i, 2);
        }
    }
    
    private void populateWriteTagWindow(){
        
        this.writeTagWindow.setVisible(true);
        this.writeTagWindow.setSize(787, 477);
        
        this.writeWarningPopup.setVisible(true);
        this.writeWarningPopup.setSize(440, 105);
        
        for (int i = 0; i < writeTagTable.getRowCount(); i++) {
            for(int j = 0; j < writeTagTable.getColumnCount(); j++) {
                writeTagTable.setValueAt("", i, j);
            }
        }
        
        
        try {
//            while (true) {
                Thread.sleep(250);
//                writeTagList = NULL;
//                for (int i = 0; i < writeTagList.size(); i++) {
//                    writeTagTable.setValueAt(writeTagList.get(i).tagNumber, i, 0);
//                    writeTagTable.setValueAt(writeTagList.get(i).objectName, i, 1);
//                    writeTagTable.setValueAt(writeTagList.get(i).objectDescription, i, 2);
//                }
//                Thread.sleep(250);
//            }
            
        } catch (InterruptedException ie) {
            System.out.println("Exception: " + ie.getMessage());
            
        }
        
//        writeTagList = NULL;// continuousReader.getTagList();
//        
//        System.out.println("\n\nUpdate:\n");
//        for (int i = 0; i < this.writeTagList.size(); i++) {
//            System.out.println(this.writeTagList.get(i).tagNumber);
//            System.out.println(this.writeTagList.get(i).objectName);
//            System.out.println(this.writeTagList.get(i).objectDescription);
//        }
        
    }
    
    private void populateTagWindow(RFIDdata currentIn){
        this.editTagWindow.setVisible(true);
        //this.editTagWindow.setSize(946, 442);
        this.idTextField.setText(currentIn.tagNumber);
        this.nameTextField.setText(currentIn.objectName);
        this.descriptionTextField.setText(currentIn.objectDescription);
        try {
            String current = new java.io.File( "." ).getCanonicalPath();
            java.nio.file.Path folderPath = java.nio.file.Paths.get(current, "database", currentIn.tagNumber);
            
            java.io.File file = new java.io.File(folderPath.toString());
            
            java.nio.file.Path filePath;
            
            if (file.exists()) {
                filePath = java.nio.file.Paths.get(folderPath.toString(), "thumb.png");
            } else {
                filePath = java.nio.file.Paths.get(current, "database", "default", "thumb.png");
            }
            
            this.thumbnailDisplay.setIcon(new javax.swing.ImageIcon(filePath.toString()));
            
        } catch (IOException ex) {
            System.out.println("Error resizing the image.");
            ex.printStackTrace();
        }
    }
    
    private void detectedTagTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_detectedTagTableMouseClicked
        if (evt.getClickCount() == 2) {
            javax.swing.JTable target = (javax.swing.JTable)evt.getSource();
            int row = target.getSelectedRow();

            RFIDdata current = rfidTagList.get(rfidTagList.indexOf(new RFIDdata(target.getValueAt(row, 0).toString())));
            
            populateTagWindow(current);
        }
    }//GEN-LAST:event_detectedTagTableMouseClicked

    private void createImageData(java.io.File inFile, String inID) {
        try {
            String current = new java.io.File( "." ).getCanonicalPath();
            java.nio.file.Path folderPath = java.nio.file.Paths.get(current, "database", inID);
            java.io.File file = new java.io.File(folderPath.toString());
//            System.out.println("Proposed dir:"+folderPath.toString());
            
            if (!file.exists()) {
                if (!file.mkdir()) {
                   System.out.println("Failed to create directory!");
                }
            }

            ImageResizer imageResizer = new ImageResizer();
            
            java.nio.file.Path mainFilePath = java.nio.file.Paths.get(folderPath.toString(), "main.png");
            java.nio.file.Path thumbFilePath = java.nio.file.Paths.get(folderPath.toString(), "thumb.png");
            
            imageResizer.resize(inFile, mainFilePath.toString(), 1);
            imageResizer.resize(inFile, thumbFilePath.toString(), 200, 200);
        } catch (IOException ex) {
            System.out.println("Error resizing the image.");
            ex.printStackTrace();
        }
    }
    
    private void setTagImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_setTagImageMouseClicked
         if(this.tagImageChooser.showOpenDialog(this) == javax.swing.JFileChooser.APPROVE_OPTION) {
             java.io.File imageFile = tagImageChooser.getSelectedFile(); 
//             createImageData(imageFile, "1");     // For testing
             createImageData(imageFile, this.idTextField.getText());
             try {
                String current = new java.io.File( "." ).getCanonicalPath();
                java.nio.file.Path filePath = java.nio.file.Paths.get(current, "database", this.idTextField.getText(), "thumb.png");
                javax.swing.ImageIcon newIcon = new javax.swing.ImageIcon(filePath.toString());
                newIcon.getImage().flush();
                this.thumbnailDisplay.setIcon( new javax.swing.ImageIcon(javax.imageio.ImageIO.read( new java.io.File(filePath.toString()) ) ) );
                
             } catch (IOException ex) {
                System.out.println("Error finding image.");
                ex.printStackTrace();
             }
         } 
    }//GEN-LAST:event_setTagImageMouseClicked

    private void viewFullSizeImageMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_viewFullSizeImageMouseClicked
        
        try {
            String current = new java.io.File( "." ).getCanonicalPath();
            java.nio.file.Path folderPath = java.nio.file.Paths.get(current, "database", this.idTextField.getText());
            java.io.File file = new java.io.File(folderPath.toString());
            java.nio.file.Path filePath;
            if (file.exists()) {
                filePath = java.nio.file.Paths.get(folderPath.toString(), "main.png");
            } else {
                filePath = java.nio.file.Paths.get(current, "database", "default", "main.png");
            }
            javax.swing.ImageIcon newIcon = new javax.swing.ImageIcon(filePath.toString());
            newIcon.getImage().flush();
            newIcon = new javax.swing.ImageIcon(filePath.toString());
            newIcon.getImage().flush();
            java.awt.Dimension pictureDimension = new java.awt.Dimension(newIcon.getIconWidth(), newIcon.getIconHeight());
            java.awt.Dimension windowDimension = new java.awt.Dimension(newIcon.getIconWidth() + 14, newIcon.getIconHeight() + 48);
            System.out.println(pictureDimension.toString());
            this.fullImageLabel.setSize(pictureDimension);
            this.fullImageLabel.setIcon(newIcon);
            this.fullImageLabel.updateUI();
            this.fullImageWindow.setSize(windowDimension);
            this.fullImageWindow.pack();
            this.fullImageWindow.setVisible(true);
            
        } catch (IOException ex) {
            System.out.println("Error finding image.");
            ex.printStackTrace();
        }
    }//GEN-LAST:event_viewFullSizeImageMouseClicked

    private void fullImageLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_fullImageLabelMouseClicked
        this.fullImageWindow.setVisible(false);
    }//GEN-LAST:event_fullImageLabelMouseClicked

    private void scanButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_scanButtonActionPerformed
        // TODO ad your handling code here:
    }//GEN-LAST:event_scanButtonActionPerformed

    private void mainExitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainExitButtonMouseClicked
        exitReader();
    }//GEN-LAST:event_mainExitButtonMouseClicked

    private void writeTagTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeTagTableMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_writeTagTableMouseClicked

    private void optionsMenuWriteTagActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_optionsMenuWriteTagActionPerformed
        populateWriteTagWindow();
    }//GEN-LAST:event_optionsMenuWriteTagActionPerformed

    private void writeTagWriteButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeTagWriteButtonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_writeTagWriteButtonMouseClicked

    private void writeTagExitButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeTagExitButtonMouseClicked
        this.writeTagWindow.setVisible(false);
    }//GEN-LAST:event_writeTagExitButtonMouseClicked

    private void writeWarningOkButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_writeWarningOkButtonMouseClicked
        this.writeWarningPopup.setVisible(false);
    }//GEN-LAST:event_writeWarningOkButtonMouseClicked
    
    private void exitReader() {
        writeToFile();
        setVisible(false);
        dispose();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RFIDgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RFIDgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RFIDgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RFIDgui.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RFIDgui().setVisible(true);
            }
        });
    }

    private java.util.ArrayList<RFIDdata> rfidTagList = new java.util.ArrayList<RFIDdata>();
    private java.util.ArrayList<RFIDdata> writeTagList = new java.util.ArrayList<RFIDdata>();
    private java.util.ArrayList<RFIDdata> rfidTagDatabase = new java.util.ArrayList<RFIDdata>();
    private String databaseFile = "./database/default.json";
    private String[] tagReads;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame OLDcode;
    private javax.swing.JList<String> OLDdetectedTagList;
    private javax.swing.JScrollPane OLDdetectedTagScrollPanel;
    private javax.swing.JLabel descriptionLabel;
    private javax.swing.JTextField descriptionTextField;
    private javax.swing.JScrollPane detectedTagScrollPanel;
    private javax.swing.JTable detectedTagTable;
    private javax.swing.JPanel editTagPanel;
    private javax.swing.JFrame editTagWindow;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JMenuItem fileMenuOpenDatabase;
    private javax.swing.JMenuItem fileMenuQuit;
    private javax.swing.JLabel fullImageLabel;
    private javax.swing.JFrame fullImageWindow;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTable jTable1;
    private javax.swing.JButton mainExitButton;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JMenu optionsMenu;
    private javax.swing.JMenuItem optionsMenuConfig;
    private javax.swing.JMenuItem optionsMenuWriteTag;
    private javax.swing.JButton saveTagData;
    private javax.swing.JButton scanButton;
    private javax.swing.JCheckBox scanContinuously;
    private javax.swing.JFileChooser selectDatabase;
    private javax.swing.JButton setTagImage;
    private javax.swing.JFileChooser tagImageChooser;
    private javax.swing.JLabel thumbnailDisplay;
    private javax.swing.JButton viewFullSizeImage;
    private javax.swing.JButton writeTagExitButton;
    private javax.swing.JPanel writeTagPanel;
    private javax.swing.JScrollPane writeTagScrollPanel;
    private javax.swing.JTable writeTagTable;
    private javax.swing.JFrame writeTagWindow;
    private javax.swing.JButton writeTagWriteButton;
    private javax.swing.JLabel writeWarningLabel;
    private javax.swing.JButton writeWarningOkButton;
    private javax.swing.JDialog writeWarningPopup;
    // End of variables declaration//GEN-END:variables
}
